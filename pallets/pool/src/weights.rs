
//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
    fn create() -> Weight;
    fn leave_pool() -> Weight;
    fn join() -> Weight;
    fn cancel_join() -> Weight;
    fn vote() -> Weight;
    fn get_pool_members() -> Weight;
    fn list_pools() -> Weight;
    fn list_pool_join_requests() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn create() -> Weight {
        Weight::from_parts(10_000u64, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn leave_pool() -> Weight {
        Weight::from_parts(10_000u64, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn join() -> Weight {
        Weight::from_parts(10_000u64, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn cancel_join() -> Weight {
        Weight::from_parts(10_000u64, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn vote() -> Weight {
        Weight::from_parts(10_000u64, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn get_pool_members() -> Weight {
        Weight::from_parts(10_000u64, 0)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn list_pools() -> Weight {
        Weight::from_parts(10_000u64, 0)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn list_pool_join_requests() -> Weight {
        Weight::from_parts(10_000u64, 0)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
}